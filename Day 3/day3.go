package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
)

type StringArrays struct {
	bitOccurences []int
	gammaString   string
	epsilonString string
}

func main() {
	arr := StringArrays{}
	arr.open()
	arr.rates()
}

//Open() will read in the commands line by line from binary.txt
func (arr *StringArrays) open() {
	size := 12
	// initialize array of 0's, with len = the first line
	arr.bitOccurences = make([]int, size)

	// Opens the instructions.txt file and stores it in f
	f, err := os.Open("binary.txt")
	if err != nil {
		log.Println(err)
	}
	defer f.Close()
	// Splits on newlines
	scanner := bufio.NewScanner(f)

	// Iterate through each line of f based on newline
	for scanner.Scan() {
		// Further iterate through each line based on the separating space
		v := strings.SplitAfter(scanner.Text(), "")

		for i, s := range v {
			switch s {
			case "1":
				arr.bitOccurences[i] += 1
			case "0":
				arr.bitOccurences[i] -= 1
			}
		}
	}

	fmt.Println(arr.bitOccurences)

	// Handle any errors generated by scanner.Scan()
	if err := scanner.Err(); err != nil {
		log.Println(err)
	}

}

func (arr *StringArrays) rates() {
	for _, bit := range arr.bitOccurences {
		if bit >= 0 {
			arr.gammaString += "1"
			arr.epsilonString += "0"
		} else {
			arr.gammaString += "0"
			arr.epsilonString += "1"
		}

	}
	fmt.Println(arr.gammaString)
	fmt.Println(arr.epsilonString)

	gamma, _ := strconv.ParseInt(arr.gammaString, 2, 64)
	epsilon, _ := strconv.ParseInt(arr.epsilonString, 2, 64)
	product := gamma * epsilon
	fmt.Println(product)
}
